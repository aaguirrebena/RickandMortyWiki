{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EpisodeInfo = props => {\n  // const [charArray, setCharArray] = useState([]);\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode; // useEffect(async () => {\n  //     const dataArray = characters.map(c =>  fetch(c)\n  //     .then(response => response.json())\n  //     .then(result => ({id: result.id, name: result.name})))\n  //     await Promise.all([dataArray])\n  //     setCharArray(dataArray)\n  // }, [])\n  // dataArray = dataArray.map(data => {\n  //     const result = data.json();\n  //     return ({id: result.id, name: result.name})\n  // })}\n  // async function getCharAsync(url)\n  // {\n  //   let response = await fetch(url);\n  //   let result = await response.json()\n  //   return result;\n  // }\n  // const charNames = characters.map(char => {\n  //     getCharAsync(char)\n  //     .then(result => ({id: result.id, name: result.name}))});\n  // const charNames = []\n  // characters.forEach((c) => fetch(c)\n  //                     .then(response => response.json())\n  //                     .then(result => charNames.push({id: result.id, name: result.name})));\n  // Promise.all([charNames])\n  //     .then(results => {\n  //      console.log(results);\n  //  })\n\n  function handle_click(ids) {\n    const use = ids.split(\"/\");\n    const len = use.length - 1;\n    console.log(use, len);\n    props.searchData(\"character_id\", \"1\", `${len}`);\n  } // const listItems = charNames.map((a) =>  <li>{a}</li>);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, characters.map(c => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: () => handle_click(c),\n    className: \"card-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 37\n    }\n  }, \" \", c, \" \"))))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","useState","useEffect","EpisodeInfo","props","name","air_date","episode","characters","handle_click","ids","use","split","len","length","console","log","searchData","map","c"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAE3B;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAwCJ,KAAK,CAACG,OAApD,CAH2B,CAK3B;AACA;AACA;AACA;AACA;AACA;AACA;AAII;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA,WAASE,YAAT,CAAuBC,GAAvB,EAA4B;AACxB,UAAMC,GAAG,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAZ;AACA,UAAMC,GAAG,GAAGF,GAAG,CAACG,MAAJ,GAAW,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EAAiBE,GAAjB;AACAT,IAAAA,KAAK,CAACa,UAAN,CAAiB,cAAjB,EAAiC,GAAjC,EAAuC,GAAEJ,GAAI,EAA7C;AACH,GA/C0B,CAgD3B;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCR,IAAhC,MADJ,eAEI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCC,QAAhC,MAFJ,eAGI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCC,OAAhC,MAHJ,CADJ,CADJ,CADJ,eAUI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,UAAU,CAACU,GAAX,CAAeC,CAAC,iBACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAG,IAAA,IAAI,EAAC,GAAR;AAAY,IAAA,OAAO,EAAE,MAAMV,YAAY,CAACU,CAAD,CAAvC;AAA4C,IAAA,SAAS,EAAC,YAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqEA,CAArE,MAAJ,CADH,CADL,CANJ,CADJ,CADJ,CAVJ,CADJ;AA+BH,CAhFD;;AAkFA,eAAehB,WAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    // const [charArray, setCharArray] = useState([]);\n    const {name, air_date, episode, characters} = props.episode;\n\n    // useEffect(async () => {\n    //     const dataArray = characters.map(c =>  fetch(c)\n    //     .then(response => response.json())\n    //     .then(result => ({id: result.id, name: result.name})))\n    //     await Promise.all([dataArray])\n    //     setCharArray(dataArray)\n    // }, [])\n\n\n\n        // dataArray = dataArray.map(data => {\n        //     const result = data.json();\n        //     return ({id: result.id, name: result.name})\n        // })}\n\n    // async function getCharAsync(url)\n    // {\n    //   let response = await fetch(url);\n    //   let result = await response.json()\n    //   return result;\n    // }\n    // const charNames = characters.map(char => {\n    //     getCharAsync(char)\n    //     .then(result => ({id: result.id, name: result.name}))});\n\n    // const charNames = []\n\n    // characters.forEach((c) => fetch(c)\n    //                     .then(response => response.json())\n    //                     .then(result => charNames.push({id: result.id, name: result.name})));\n\n    // Promise.all([charNames])\n    //     .then(results => {\n    //      console.log(results);\n    //  })\n\n\n    function handle_click (ids) {\n        const use = ids.split(\"/\");\n        const len = use.length-1\n        console.log(use, len)\n        props.searchData(\"character_id\", \"1\", `${len}`);\n    }\n    // const listItems = charNames.map((a) =>  <li>{a}</li>);\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        {/* {console.log(characters)} */}\n                        {/* {console.log(charNames[0])} */}\n                        {/* {console.log(charNames)} */}\n                        {/* {console.log(charNames)} */}\n                        <p className=\"card-text\">Characters: </p>\n                        <ul>\n                            {characters.map(c =>\n                                <li><a href=\"#\" onClick={() => handle_click(c)} className=\"card-text \"> {c} </a></li>\n                            )}\n                            {/* <li><a onClick={handle_click}>\n                                Click me! </a></li> */}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}