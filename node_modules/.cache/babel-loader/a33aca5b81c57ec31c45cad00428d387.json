{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/App.js\";\nimport React, { Component } from 'react';\nimport Wiki from './components/Search';\nimport Response from './components/Result';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filter: 'home_page',\n      // word to search\n      ids: '',\n      //ids to searh\n      episodes: [],\n      characters: [],\n      locations: [],\n      locations_chars: [],\n      page: '1',\n      // first page\n      max_page: '' // nÂ° pages request\n\n    };\n\n    this.scroll = () => {\n      const element = document.querySelector('.jumbotron');\n      element.scrollIntoView('instant', 'start');\n    };\n\n    this.nextPage = () => {\n      // read actual state of the page\n      let page = this.state.page; // new page ++, no puede pasar si esta en la ultima pagina\n\n      if (page === this.state.max_page) return null;\n      page++; // refresh state\n\n      this.setState({\n        page\n      }, () => {\n        this.apiRequest();\n        this.scroll();\n      });\n    };\n\n    this.previewPage = () => {\n      // read actual state of the page\n      let page = this.state.page; // new page --, no puede retroceder estando en la primera pagina\n\n      if (page === 1) return null;\n      page--; // refresh state\n\n      this.setState({\n        page\n      }, () => {\n        this.apiRequest();\n        this.scroll();\n      });\n    };\n\n    this.searchData = (filter, page, ids) => {\n      this.setState({\n        filter,\n        page,\n        ids\n      }, () => {\n        this.apiRequest();\n      });\n    };\n\n    this.apiRequest = () => {\n      //\"https://rickandmortyapi.com/api/{}\" -> sample request\n      const filter = this.state.filter;\n      const page = this.state.page;\n      const ids = this.state.ids; // const url = `https://rickandmortyapi.com/api/episode/?page=${page}`;\n\n      const url_character = `https://rickandmortyapi.com/api/character/?page=${page}&name=${filter}`;\n      const url_character_id = `https://rickandmortyapi.com/api/character/${ids}`;\n      const url_location = `https://rickandmortyapi.com/api/location/?page=${page}&name=${filter}`;\n      const url_location_id = `https://rickandmortyapi.com/api/location/${ids}`;\n      const url_episode = `https://rickandmortyapi.com/api/episode/?episode=${filter}`;\n      const url_episode_id = `https://rickandmortyapi.com/api/episode/${ids}`;\n\n      if (filter === \"home_page\") {\n        fetch(`https://rickandmortyapi.com/api/episode?page=${this.state.page}`).then(response => response.json()).then(result => this.setState({\n          episodes: result.results,\n          max_page: result.info.pages,\n          requestEp_Failed: false\n        }));\n      } else if (filter === \"character_id\") {\n        fetch(url_character_id).then(response => response.json()).then(result => this.setState({\n          characters: [{\n            id: result.id,\n            url: result.url,\n            image: result.image,\n            name: result.name,\n            species: result.species,\n            status: result.status,\n            type: result.type,\n            gender: result.gender,\n            origin: result.origin,\n            location: result.location,\n            episode: result.episode\n          }],\n          locations: [],\n          episodes: [],\n          requestCharId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestCharId_Failed: true\n          });\n        });\n      } else if (filter === \"location_id\") {\n        fetch(url_location_id).then(response => response.json()).then(result => this.setState({\n          locations: [{\n            id: result.id,\n            name: result.name,\n            type: result.type,\n            dimension: result.dimension,\n            residents: result.residents\n          }],\n          characters: [],\n          requestLocId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestLocId_Failed: true\n          });\n        });\n      } else if (filter === \"episode_id\") {\n        fetch(url_episode_id).then(response => response.json()).then(result => this.setState({\n          episodes: [{\n            id: result.id,\n            name: result.name,\n            air_date: result.air_date,\n            episode: result.episode,\n            characters: result.characters\n          }],\n          characters: [],\n          requestEpId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestEpId_Failed: true\n          });\n        });\n      } else if (filter != \"location_id\") {\n        fetch(url_character).then(response => response.json()).then(result => this.setState({\n          characters: result.results,\n          max_page: result.info.pages,\n          requestChar_Failed: false\n        })).catch(error => {\n          this.setState({\n            characters: [],\n            requestChar_Failed: true\n          });\n        });\n        fetch(url_location).then(response => response.json()).then(result => this.setState({\n          locations: result.results,\n          max_page: result.info.pages,\n          requestLoc_Failed: false\n        })).catch(error => {\n          this.setState({\n            locations: [],\n            requestLoc_Failed: true\n          });\n        });\n        fetch(url_episode).then(response => response.json()).then(result => this.setState({\n          episodes: result.results,\n          max_page: result.info.pages,\n          requestEp_Failed: false\n        })).catch(error => {\n          this.setState({\n            episodes: [],\n            requestEp_Failed: true\n          });\n        });\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.apiRequest();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, \"Rick and Morty Wiki\"), /*#__PURE__*/React.createElement(Wiki, {\n      searchData: this.searchData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Response, {\n      characters: this.state.characters,\n      locations: this.state.locations,\n      episodes: this.state.episodes,\n      searchData: this.searchData,\n      nextPage: this.nextPage,\n      previewPage: this.previewPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/App.js"],"names":["React","Component","Wiki","Response","App","state","filter","ids","episodes","characters","locations","locations_chars","page","max_page","scroll","element","document","querySelector","scrollIntoView","nextPage","setState","apiRequest","previewPage","searchData","url_character","url_character_id","url_location","url_location_id","url_episode","url_episode_id","fetch","then","response","json","result","results","info","pages","requestEp_Failed","id","url","image","name","species","status","type","gender","origin","location","episode","requestCharId_Failed","catch","error","dimension","residents","requestLocId_Failed","air_date","requestEpId_Failed","requestChar_Failed","requestLoc_Failed","componentWillMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Wiki from './components/Search';\nimport Response from './components/Result';\n\nclass App extends Component {\n\n  state = {\n    filter : 'home_page', // word to search\n    ids : '', //ids to searh\n    episodes : [],\n    characters : [],\n    locations : [],\n    locations_chars : [],\n    page : '1', // first page\n    max_page : '' // nÂ° pages request\n  }\n\n  componentWillMount(){\n    this.apiRequest()\n  }\n\n  scroll = () => {\n    const element = document.querySelector('.jumbotron');\n    element.scrollIntoView('instant', 'start');\n  }\n\n  nextPage = () => {\n    // read actual state of the page\n    let page = this.state.page;\n    // new page ++, no puede pasar si esta en la ultima pagina\n    if(page === this.state.max_page) return null;\n    page ++;\n    // refresh state\n    this.setState({\n      page\n    }, () => {\n      this.apiRequest()\n      this.scroll()\n    });\n  }\n\n  previewPage = () => {\n    // read actual state of the page\n    let page = this.state.page;\n    // new page --, no puede retroceder estando en la primera pagina\n    if(page === 1) return null;\n    page --;\n    // refresh state\n    this.setState({\n      page\n    }, () => {\n      this.apiRequest()\n      this.scroll()\n    });\n  }\n\n  searchData =  (filter, page, ids) => {\n    this.setState({\n      filter,\n      page,\n      ids\n    }, () =>{\n      this.apiRequest();\n    })\n  }\n\n  apiRequest = () => {\n    //\"https://rickandmortyapi.com/api/{}\" -> sample request\n    const filter = this.state.filter;\n    const page = this.state.page;\n    const ids = this.state.ids;\n\n    // const url = `https://rickandmortyapi.com/api/episode/?page=${page}`;\n\n    const url_character = `https://rickandmortyapi.com/api/character/?page=${page}&name=${filter}`;\n    const url_character_id = `https://rickandmortyapi.com/api/character/${ids}`;\n\n\n    const url_location = `https://rickandmortyapi.com/api/location/?page=${page}&name=${filter}`;\n    const url_location_id = `https://rickandmortyapi.com/api/location/${ids}`\n\n    const url_episode = `https://rickandmortyapi.com/api/episode/?episode=${filter}`;\n    const url_episode_id = `https://rickandmortyapi.com/api/episode/${ids}`\n\n    if (filter === \"home_page\"){\n      fetch(`https://rickandmortyapi.com/api/episode?page=${this.state.page}`)\n      .then(response => response.json())\n      .then(result => this.setState({ episodes : result.results , max_page : result.info.pages, requestEp_Failed: false }) )\n    }\n\n    else if (filter === \"character_id\"){\n        fetch(url_character_id)\n        .then(response => response.json())\n        .then(result => this.setState({ characters : [{id: result.id, url: result.url, image: result.image, name: result.name, species: result.species, status: result.status, type: result.type, gender: result.gender, origin: result.origin, location: result.location,\n        episode: result.episode}], locations: [], episodes: [], requestCharId_Failed: false }) )\n        .catch((error) => { this.setState({ requestCharId_Failed: true })\n        })\n    }\n\n    else if (filter === \"location_id\"){\n      fetch(url_location_id)\n      .then(response => response.json())\n      .then(result => this.setState({ locations : [{id: result.id, name: result.name, type: result.type, dimension: result.dimension, residents: result.residents}], characters: [], requestLocId_Failed: false  }) )\n      .catch((error) => { this.setState({ requestLocId_Failed: true })\n      })\n    }\n\n    else if (filter === \"episode_id\"){\n      fetch(url_episode_id)\n      .then(response => response.json())\n      .then(result => this.setState({ episodes : [{id: result.id, name: result.name, air_date: result.air_date, episode: result.episode, characters: result.characters}], characters: [], requestEpId_Failed: false  }) )\n      .catch((error) => { this.setState({ requestEpId_Failed: true })\n      })\n    }\n\n\n    else if (filter != \"location_id\"){\n\n      fetch(url_character)\n      .then(response => response.json())\n      .then(result => this.setState({ characters : result.results , max_page : result.info.pages, requestChar_Failed: false }) )\n      .catch((error) => {\n        this.setState({ characters : [], requestChar_Failed: true })\n      })\n\n      fetch(url_location)\n      .then(response => response.json())\n      .then(result => this.setState({ locations : result.results , max_page : result.info.pages, requestLoc_Failed: false }) )\n      .catch((error) => {\n        this.setState({ locations : [], requestLoc_Failed: true })\n      })\n\n      fetch(url_episode)\n      .then(response => response.json())\n      .then(result => this.setState({ episodes : result.results, max_page : result.info.pages, requestEp_Failed: false }) )\n      .catch((error) => {\n        this.setState({ episodes : [], requestEp_Failed: true })\n      })\n\n    }\n\n  }\n\n  render () {\n    return (\n      <div className=\"app container\">\n\n        <div className=\"jumbotron\">\n          <p className=\"lead text-center\">Rick and Morty Wiki</p>\n\n          <Wiki\n            searchData={this.searchData}\n          />\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <Response\n            characters = {this.state.characters}\n            locations = {this.state.locations}\n            episodes = {this.state.episodes}\n            searchData = {this.searchData}\n            nextPage = {this.nextPage}\n            previewPage = {this.previewPage}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}