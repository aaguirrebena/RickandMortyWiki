{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React from 'react';\n\nconst EpisodeInfo = props => {\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode;\n  const charNames = [];\n  characters.forEach(c => fetch(c).then(response => response.json()).then(result => charNames.push({\n    id: result.id,\n    name: result.name,\n    url: c\n  }))); // const charNames =   characters.forEach((c) =>  fetch(c)\n  //                         .then(response => response.json())\n  //                         .then(result => ({id: result.id, name: result.name, url: c})));\n\n  function handle_click(e) {\n    e.preventDefault();\n    props.searchData(\"character_id\", \"4\");\n  } // const listItems = charNames.map((a) =>  <li>{a}</li>);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, console.log(charNames[0]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, characters.forEach(c => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    onClick: handle_click,\n    className: \"card-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 37\n    }\n  }, \" \", c, \" \"))))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","EpisodeInfo","props","name","air_date","episode","characters","charNames","forEach","c","fetch","then","response","json","result","push","id","url","handle_click","e","preventDefault","searchData","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAE3B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAwCJ,KAAK,CAACG,OAApD;AACA,QAAME,SAAS,GAAG,EAAlB;AAEAD,EAAAA,UAAU,CAACE,OAAX,CAAoBC,CAAD,IAAQC,KAAK,CAACD,CAAD,CAAL,CACEE,IADF,CACOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADnB,EAEEF,IAFF,CAEOG,MAAM,IAAIP,SAAS,CAACQ,IAAV,CAAe;AAACC,IAAAA,EAAE,EAAEF,MAAM,CAACE,EAAZ;AAAgBb,IAAAA,IAAI,EAAEW,MAAM,CAACX,IAA7B;AAAmCc,IAAAA,GAAG,EAAER;AAAxC,GAAf,CAFjB,CAA3B,EAL2B,CAS3B;AACA;AACA;;AAEA,WAASS,YAAT,CAAuBC,CAAvB,EAA0B;AACtBA,IAAAA,CAAC,CAACC,cAAF;AAEAlB,IAAAA,KAAK,CAACmB,UAAN,CAAiB,cAAjB,EAAiC,GAAjC;AACH,GAjB0B,CAkB3B;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgClB,IAAhC,MADJ,eAEI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCC,QAAhC,MAFJ,eAGI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCC,OAAhC,MAHJ,CADJ,CADJ,CADJ,eAUI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKiB,OAAO,CAACC,GAAR,CAAYhB,SAAS,CAAC,CAAD,CAArB,CAFL,eAII;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,UAAU,CAACE,OAAX,CAAmBC,CAAC,iBACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAI;AAAG,IAAA,OAAO,EAAES,YAAZ;AAA0B,IAAA,SAAS,EAAC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAmDT,CAAnD,MAAJ,CADH,CADL,CALJ,CADJ,CADJ,CAVJ,CADJ;AA8BH,CAjDD;;AAmDA,eAAeR,WAAf","sourcesContent":["import React from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    const {name, air_date, episode, characters} = props.episode;\n    const charNames = []\n    \n    characters.forEach((c) =>  fetch(c)\n                                .then(response => response.json())\n                                .then(result => charNames.push({id: result.id, name: result.name, url: c})))\n\n    // const charNames =   characters.forEach((c) =>  fetch(c)\n    //                         .then(response => response.json())\n    //                         .then(result => ({id: result.id, name: result.name, url: c})));\n\n    function handle_click (e) {\n        e.preventDefault();\n\n        props.searchData(\"character_id\", \"4\");\n    }\n    // const listItems = charNames.map((a) =>  <li>{a}</li>);\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        {/* {console.log(characters)} */}\n                        {console.log(charNames[0])}\n                        {/* {console.log(charNames[0])} */}\n                        <p className=\"card-text\">Characters: </p>\n                        <ul>\n                            {characters.forEach(c =>\n                                <li><a onClick={handle_click} className=\"card-text \"> {c} </a></li>\n                            )}\n                            {/* <li><a onClick={handle_click}>\n                                Click me! </a></li> */}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}