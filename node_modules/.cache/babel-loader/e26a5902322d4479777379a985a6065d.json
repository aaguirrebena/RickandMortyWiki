{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EpisodeInfo = props => {\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode;\n  const [charNames, setChar] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const promiseArray = characters.map(c => fetch(c).then(response => response.json()));\n    Promise.all([promiseArray]).then(result => {\n      setChar(result);\n      setLoading(false);\n    });\n  }, [characters]); // charNames.map(element=>{\n  //     element.then(val => console.log(val))\n  // })\n  // const charNames = []\n  // characters.forEach((c) => fetch(c)\n  //                     .then(response => response.json())\n  //                     .then(result => charNames.push({id: result.id, name: result.name})));\n  // function prom (arr){\n  //     var estesi = arr.forEach(element => {\n  //     element.then((val) => {return val})})\n  //     return estesi\n  // }\n  // prom(charNames)\n  // console.log(prom(charNames))\n  // console.log(prom())\n  // const handler = async () =>{\n  //     let dataArray = characters.map(c => fetch(c))\n  //     await Promise.all([dataArray])\n  //     dataArray = dataArray.map(c => {\n  //         const response = c.json()\n  //         return ({id: response.id, name: response.name})\n  //     })\n  // }\n  // async function getCharAsync(url)\n  // {\n  //   let response = await fetch(url);\n  //   let result = await response.json()\n  //   return result;\n  // }\n  // const charNames = characters.map(char => {\n  //     getCharAsync(char)\n  //     .then(result => ({id: result.id, name: result.name}))});\n  // Promise.all([charNames])\n  //      .then(results => {\n  //      console.log(results);\n  //  })\n\n  function handleClick(e, ids) {\n    e.preventDefault(); // const use = ids.split(\"/\");\n    // const len = use.length-1\n    // const id = use[len]\n\n    props.searchData(\"character_id\", \"1\", `${ids}`);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), loading && \"LOADING...\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, !loading && charNames.map(character => {\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      onClick: e => handleClick(e, character),\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    }), \" \", character.name);\n  }))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","useState","useEffect","EpisodeInfo","props","name","air_date","episode","characters","charNames","setChar","loading","setLoading","promiseArray","map","c","fetch","then","response","json","Promise","all","result","handleClick","e","ids","preventDefault","searchData","character"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    const {name, air_date, episode, characters} = props.episode;\n\n    const [charNames, setChar] = useState([]);\n    const [loading, setLoading] =  useState(true);\n\n    useEffect(() => {\n        const promiseArray = characters.map(c => fetch(c).then(response => response.json()));\n        Promise.all([promiseArray]).then(result => {\n            setChar(result);\n            setLoading(false);\n        });\n    }, [characters]);\n\n    // charNames.map(element=>{\n    //     element.then(val => console.log(val))\n    // })\n\n    // const charNames = []\n    // characters.forEach((c) => fetch(c)\n    //                     .then(response => response.json())\n    //                     .then(result => charNames.push({id: result.id, name: result.name})));\n\n    // function prom (arr){\n    //     var estesi = arr.forEach(element => {\n    //     element.then((val) => {return val})})\n    //     return estesi\n    // }\n\n    // prom(charNames)\n    // console.log(prom(charNames))\n    // console.log(prom())\n   \n    // const handler = async () =>{\n    //     let dataArray = characters.map(c => fetch(c))\n    //     await Promise.all([dataArray])\n\n    //     dataArray = dataArray.map(c => {\n    //         const response = c.json()\n    //         return ({id: response.id, name: response.name})\n    //     })\n    // }\n\n    // async function getCharAsync(url)\n    // {\n    //   let response = await fetch(url);\n    //   let result = await response.json()\n    //   return result;\n    // }\n    // const charNames = characters.map(char => {\n    //     getCharAsync(char)\n    //     .then(result => ({id: result.id, name: result.name}))});\n\n\n    // Promise.all([charNames])\n    //      .then(results => {\n    //      console.log(results);\n    //  })\n\n\n    function handleClick (e, ids) {\n        e.preventDefault();\n        // const use = ids.split(\"/\");\n        // const len = use.length-1\n        // const id = use[len]\n        props.searchData(\"character_id\", \"1\", `${ids}`);\n    }\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Characters: </p>\n                        {loading && \"LOADING...\"}\n                        <ul>\n                            {!loading &&\n                            charNames.map(character => {\n                                <li>\n                                    <a\n                                        href=\"#\" onClick={e => handleClick(e, character)} className=\"card-text\">\n                                    </a> {character.name}\n                                </li>\n                            })}\n\n                            {/* {characters.map(c =>\n                                <li><a href=\"#\" onClick={() => handle_click(c)} className=\"card-text \"> {c} </a></li>\n                            )} */}\n\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}