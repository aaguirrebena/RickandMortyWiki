{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EpisodeInfo = props => {\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode;\n  const [charNames, setChar] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const promiseArray = characters.map(c => fetch(c).then(response => response.json()));\n    Promise.all([promiseArray]).then(result => {\n      setChar(result);\n      setLoading(false);\n    });\n  }, [characters]);\n\n  function handleClick(e, ids) {\n    e.preventDefault();\n    const use = ids.split(\"/\");\n    const len = use.length - 1;\n    const id = use[len];\n    props.searchData(\"character_id\", \"1\", `${id}`);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), loading && \"LOADING...\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 25\n    }\n  }, !loading && charNames.map(character => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: e => handle_episode(e, character),\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 37\n    }\n  }, \" \", character.name, \" \"))))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","useState","useEffect","EpisodeInfo","props","name","air_date","episode","characters","charNames","setChar","loading","setLoading","promiseArray","map","c","fetch","then","response","json","Promise","all","result","handleClick","e","ids","preventDefault","use","split","len","length","id","searchData","character","handle_episode"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    const {name, air_date, episode, characters} = props.episode;\n\n    const [charNames, setChar] = useState([]);\n    const [loading, setLoading] =  useState(true);\n\n    useEffect(() => {\n        const promiseArray = characters.map(c => fetch(c).then(response => response.json()));\n        Promise.all([promiseArray]).then(result => {\n            setChar(result);\n            setLoading(false);\n        });\n    }, [characters]);\n\n    function handleClick (e, ids) {\n        e.preventDefault();\n        const use = ids.split(\"/\");\n        const len = use.length-1\n        const id = use[len]\n        props.searchData(\"character_id\", \"1\", `${id}`);\n    }\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Characters: </p>\n                        {loading && \"LOADING...\"}\n                        <ul>\n                            {!loading &&\n                            charNames.map(character => (\n                                <li>\n                                    <a href=\"#\" onClick={e => handle_episode(e, character)} className=\"card-text\"> {character.name} </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}