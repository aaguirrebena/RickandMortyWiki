{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea0/example/example/src/App.js\";\nimport React, { Component } from 'react';\nimport Wiki from './components/Search';\nimport Response from './components/Result';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filter: '',\n      // word to search\n      ids: '',\n      //ids to searh\n      episodes: [],\n      episodes_chars: [],\n      characters: [],\n      chars_eps: [],\n      locations: [],\n      locs_chars: [],\n      page: '1',\n      // first page\n      max_page: '' // nÂ° pages request\n\n    };\n\n    this.scroll = () => {\n      const element = document.querySelector('.jumbotron');\n      element.scrollIntoView('instant', 'start');\n    };\n\n    this.nextPage = () => {\n      // read actual state of the page\n      let page = this.state.page; // new page ++, no puede pasar si esta en la ultima pagina\n\n      if (page === this.state.max_page) return null;\n      page++; // refresh state\n\n      this.setState({\n        page\n      }, () => {\n        this.apiRequest();\n        this.scroll();\n      });\n    };\n\n    this.previewPage = () => {\n      // read actual state of the page\n      let page = this.state.page; // new page --, no puede retroceder estando en la primera pagina\n\n      if (page === 1) return null;\n      page--; // refresh state\n\n      this.setState({\n        page\n      }, () => {\n        this.apiRequest();\n        this.scroll();\n      });\n    };\n\n    this.searchData = (filter, page) => {\n      this.setState({\n        filter,\n        page\n      }, () => {\n        this.apiRequest();\n      });\n    };\n\n    this.apiRequest = () => {\n      //\"https://rickandmortyapi.com/api/{}\" -> sample request\n      const filter = this.state.filter;\n      const page = this.state.page;\n      const ids = this.state.ids; // if(filter != \"character\") return null;\n\n      const url = `https://rickandmortyapi.com/api/episode/?page=${page}`;\n      const url_character = `https://rickandmortyapi.com/api/character/?page=${page}&name=${filter}`;\n      const url_character_id = `https://rickandmortyapi.com/api/character/2`;\n      const url_location = `https://rickandmortyapi.com/api/location/?page=${page}&name=${filter}`;\n      const url_location_id = `https://rickandmortyapi.com/api/location/3`;\n      const url_episode = `https://rickandmortyapi.com/api/episode/?episode=${filter}`;\n      const url_episode_id = `https://rickandmortyapi.com/api/episode/22`;\n\n      if (filter === \"id\") {\n        fetch(url_character_id).then(response => response.json()).then(result => this.setState({\n          characters: [{\n            id: result.id,\n            url: result.url,\n            image: result.image,\n            name: result.name,\n            species: result.species,\n            status: result.status,\n            type: result.type,\n            gender: result.gender,\n            origin: result.origin,\n            location: result.location,\n            episode: result.episode\n          }],\n          requestCharId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestFailed_id: true\n          });\n        });\n      }\n\n      if (filter === \"character_id\") {\n        fetch(url_character_id).then(response => response.json()).then(result => this.setState({\n          characters: [{\n            id: result.id,\n            name: result.name,\n            type: result.type,\n            dimension: result.dimension,\n            residents: result.residents\n          }],\n          requestCharId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestFailed_id: true\n          });\n        });\n      } else if (filter === \"location_id\") {\n        fetch(url_location_id).then(response => response.json()).then(result => this.setState({\n          characters: [{\n            id: result.id,\n            url: result.url,\n            image: result.image,\n            name: result.name,\n            species: result.species,\n            status: result.status,\n            type: result.type,\n            gender: result.gender,\n            origin: result.origin,\n            location: result.location,\n            episode: result.episode\n          }],\n          requestCharId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestFailed_id: true\n          });\n        });\n      } else if (filter === \"episode_id\") {\n        fetch(url_episode_id).then(response => response.json()).then(result => this.setState({\n          characters: [{\n            id: result.id,\n            url: result.url,\n            image: result.image,\n            name: result.name,\n            species: result.species,\n            status: result.status,\n            type: result.type,\n            gender: result.gender,\n            origin: result.origin,\n            location: result.location,\n            episode: result.episode\n          }],\n          requestCharId_Failed: false\n        })).catch(error => {\n          this.setState({\n            requestFailed_id: true\n          });\n        });\n      } else if (filter != \"id\" && filter != \"ejemplo\") {\n        fetch(url_character).then(response => response.json()).then(result => this.setState({\n          characters: result.results,\n          max_page: result.info.pages,\n          requestChar_Failed: false\n        })).catch(error => {\n          this.setState({\n            characters: [],\n            requestChar_Failed: true\n          });\n        });\n        fetch(url_location).then(response => response.json()).then(result => this.setState({\n          locations: result.results,\n          max_page: result.info.pages,\n          requestLoc_Failed: false\n        })).catch(error => {\n          this.setState({\n            locations: [],\n            requestLoc_Failed: true\n          });\n        });\n        fetch(url_episode).then(response => response.json()).then(result => this.setState({\n          episodes: result.results,\n          max_page: result.info.pages,\n          requestEpFailed: false\n        })).catch(error => {\n          this.setState({\n            episodes: [],\n            requestEpFailed: true\n          });\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, \"Rick and Morty Wiki\"), /*#__PURE__*/React.createElement(Wiki, {\n      searchData: this.searchData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Response, {\n      characters: this.state.characters,\n      locations: this.state.locations,\n      episodes: this.state.episodes,\n      nextPage: this.nextPage,\n      previewPage: this.previewPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea0/example/example/src/App.js"],"names":["React","Component","Wiki","Response","App","state","filter","ids","episodes","episodes_chars","characters","chars_eps","locations","locs_chars","page","max_page","scroll","element","document","querySelector","scrollIntoView","nextPage","setState","apiRequest","previewPage","searchData","url","url_character","url_character_id","url_location","url_location_id","url_episode","url_episode_id","fetch","then","response","json","result","id","image","name","species","status","type","gender","origin","location","episode","requestCharId_Failed","catch","error","requestFailed_id","dimension","residents","results","info","pages","requestChar_Failed","requestLoc_Failed","requestEpFailed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Wiki from './components/Search';\nimport Response from './components/Result';\n\nclass App extends Component {\n\n  state = {\n    filter : '', // word to search\n    ids : '', //ids to searh\n    episodes : [],\n    episodes_chars : [],\n    characters : [],\n    chars_eps : [],\n    locations : [],\n    locs_chars : [],\n    page : '1', // first page\n    max_page : '' // nÂ° pages request\n  }\n\n  scroll = () => {\n    const element = document.querySelector('.jumbotron');\n    element.scrollIntoView('instant', 'start');\n  }\n\n  nextPage = () => {\n    // read actual state of the page\n    let page = this.state.page;\n    // new page ++, no puede pasar si esta en la ultima pagina\n    if(page === this.state.max_page) return null;\n    page ++;\n    // refresh state\n    this.setState({\n      page\n    }, () => {\n      this.apiRequest()\n      this.scroll()\n    });\n  }\n\n  previewPage = () => {\n    // read actual state of the page\n    let page = this.state.page;\n    // new page --, no puede retroceder estando en la primera pagina\n    if(page === 1) return null;\n    page --;\n    // refresh state\n    this.setState({\n      page\n    }, () => {\n      this.apiRequest()\n      this.scroll()\n    });\n  }\n\n  searchData =  (filter, page) => {\n    this.setState({\n      filter,\n      page\n    }, () =>{\n      this.apiRequest();\n    })\n  }\n\n  apiRequest = () => {\n    //\"https://rickandmortyapi.com/api/{}\" -> sample request\n    const filter = this.state.filter;\n    const page = this.state.page;\n    const ids = this.state.ids;\n    // if(filter != \"character\") return null;\n    const url = `https://rickandmortyapi.com/api/episode/?page=${page}`;\n\n    const url_character = `https://rickandmortyapi.com/api/character/?page=${page}&name=${filter}`;\n    const url_character_id = `https://rickandmortyapi.com/api/character/2`;\n\n\n    const url_location = `https://rickandmortyapi.com/api/location/?page=${page}&name=${filter}`;\n    const url_location_id = `https://rickandmortyapi.com/api/location/3`\n\n    const url_episode = `https://rickandmortyapi.com/api/episode/?episode=${filter}`;\n    const url_episode_id = `https://rickandmortyapi.com/api/episode/22`\n\n    if (filter === \"id\"){\n        fetch(url_character_id)\n        .then(response => response.json())\n        .then(result => this.setState({ characters : [{id: result.id, url: result.url, image: result.image, name: result.name, species: result.species, status: result.status, type: result.type, gender: result.gender, origin: result.origin, location: result.location,\n        episode: result.episode}], requestCharId_Failed: false }) )\n        .catch((error) => { this.setState({ requestFailed_id: true })\n        })\n    }\n\n    if (filter === \"character_id\"){\n      fetch(url_character_id)\n      .then(response => response.json())\n      .then(result => this.setState({ characters : [{id: result.id, name: result.name, type: result.type, dimension: result.dimension, residents: result.residents}], requestCharId_Failed: false  }) )\n      .catch((error) => {\n        this.setState({ requestFailed_id: true })\n      })\n    }\n\n    else if (filter === \"location_id\"){\n      fetch(url_location_id)\n      .then(response => response.json())\n      .then(result => this.setState({ characters : [{id: result.id, url: result.url,\n         image: result.image, name: result.name, species: result.species, status: result.status,\n          type: result.type, gender: result.gender, origin: result.origin, location: result.location,\n           episode: result.episode}], requestCharId_Failed: false  }) )\n      .catch((error) => {\n        this.setState({ requestFailed_id: true })\n      })\n    }\n\n    else if (filter === \"episode_id\"){\n      fetch(url_episode_id)\n      .then(response => response.json())\n      .then(result => this.setState({ characters : [{id: result.id, url: result.url,\n         image: result.image, name: result.name, species: result.species, status: result.status,\n          type: result.type, gender: result.gender, origin: result.origin, location: result.location,\n           episode: result.episode}], requestCharId_Failed: false  }) )\n      .catch((error) => {\n        this.setState({ requestFailed_id: true })\n      })\n    }\n\n    else if (filter != \"id\" && filter != \"ejemplo\"){\n\n      fetch(url_character)\n      .then(response => response.json())\n      .then(result => this.setState({ characters : result.results , max_page : result.info.pages, requestChar_Failed: false }) )\n      .catch((error) => {\n        this.setState({ characters : [], requestChar_Failed: true })\n      })\n\n      fetch(url_location)\n      .then(response => response.json())\n      .then(result => this.setState({ locations : result.results , max_page : result.info.pages, requestLoc_Failed: false }) )\n      .catch((error) => {\n        this.setState({ locations : [], requestLoc_Failed: true })\n      })\n\n      fetch(url_episode)\n      .then(response => response.json())\n      .then(result => this.setState({ episodes : result.results , max_page : result.info.pages, requestEpFailed: false }) )\n      .catch((error) => {\n        this.setState({ episodes : [], requestEpFailed: true })\n      })\n    }\n\n  }\n\n  render () {\n    return (\n      <div className=\"app container\">\n\n        <div className=\"jumbotron\">\n          <p className=\"lead text-center\">Rick and Morty Wiki</p>\n          <Wiki\n            searchData={this.searchData}\n          />\n        </div>\n\n        <div className=\"row justify-content-center\">\n          <Response\n            characters = {this.state.characters}\n            locations = {this.state.locations}\n            episodes ={this.state.episodes}\n            nextPage={this.nextPage}\n            previewPage={this.previewPage}\n          />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}