{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EpisodeInfo = props => {\n  const [charArray, setCharArray] = useState([]);\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode;\n\n  const per = async () => {\n    let dataArray = characters.map(c => fetch(c));\n    await Promise.all([dataArray]);\n    dataArray = dataArray.map(data => {\n      const result = data.json();\n      return {\n        id: result.id,\n        name: result.name\n      };\n    });\n  };\n\n  const usar = per(); // async function getCharAsync(url)\n  // {\n  //   let response = await fetch(url);\n  //   let result = await response.json()\n  //   return result;\n  // }\n  // const charNames = characters.forEach(char => {\n  //     getCharAsync(char)\n  //     .then(result => ({id: result.id, name: result.name}))});\n  // const charNames =   characters.forEach((c) =>  fetch(c)\n  //                         .then(response => response.json())\n  //                         .then(result => ({id: result.id, name: result.name, url: c})));\n\n  function handle_click(ids) {\n    props.searchData(\"character_id\", \"1\", `${ids}`);\n  } // const listItems = charNames.map((a) =>  <li>{a}</li>);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, console.log(usar), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, characters.map(c => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: () => handle_click(c.substr(-2)),\n    className: \"card-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 37\n    }\n  }, \" \", c, \" \"))))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","useState","useEffect","EpisodeInfo","props","charArray","setCharArray","name","air_date","episode","characters","per","dataArray","map","c","fetch","Promise","all","data","result","json","id","usar","handle_click","ids","searchData","console","log","substr"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    const [charArray, setCharArray] = useState([]);\n    const {name, air_date, episode, characters} = props.episode;\n\n    const per = async () => {\n        let dataArray = characters.map(c =>  fetch(c))\n        await Promise.all([dataArray])\n\n        dataArray = dataArray.map(data => {\n            const result = data.json();\n            return ({id: result.id, name: result.name})\n        })}\n\n    const usar = per();\n    // async function getCharAsync(url)\n    // {\n    //   let response = await fetch(url);\n    //   let result = await response.json()\n    //   return result;\n    // }\n    // const charNames = characters.forEach(char => {\n    //     getCharAsync(char)\n    //     .then(result => ({id: result.id, name: result.name}))});\n\n    // const charNames =   characters.forEach((c) =>  fetch(c)\n    //                         .then(response => response.json())\n    //                         .then(result => ({id: result.id, name: result.name, url: c})));\n\n    function handle_click (ids) {\n\n        props.searchData(\"character_id\", \"1\", `${ids}`);\n    }\n    // const listItems = charNames.map((a) =>  <li>{a}</li>);\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        {/* {console.log(characters)} */}\n                        {/* {console.log(charNames[0])} */}\n                        {/* {console.log(charNames)} */}\n                        {console.log(usar)}\n                        <p className=\"card-text\">Characters: </p>\n                        <ul>\n                            {characters.map(c =>\n                                <li><a href=\"#\" onClick={() => handle_click(c.substr(-2))} className=\"card-text \"> {c} </a></li>\n                            )}\n                            {/* <li><a onClick={handle_click}>\n                                Click me! </a></li> */}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}