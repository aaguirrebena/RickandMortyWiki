{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EpisodeInfo = props => {\n  // let [charNames, setChar] = useState([]);\n  const {\n    name,\n    air_date,\n    episode,\n    characters\n  } = props.episode; // useEffect(async () => {\n  //     const dataArray = characters.map(c => fetch(c)\n  //     .then(response => response.json())\n  //     .then(result => ({id: result.id, name: result.name})))\n  //     // await Promise.all([dataArray])\n  //     setChar(dataArray)\n  // }, [])\n\n  charNames = [];\n  characters.forEach(c => fetch(c).then(response => response.json()).then(result => charNames.push({\n    id: result.id,\n    name: result.name\n  })));\n\n  function prom() {\n    var estesi = charNames.forEach(element => {\n      element.then(val => {\n        return val;\n      });\n    });\n    return estesi;\n  } // console.log(prom())\n  // const handler = async () =>{\n  //     let dataArray = characters.map(c => fetch(c))\n  //     await Promise.all([dataArray])\n  //     dataArray = dataArray.map(c => {\n  //         const response = c.json()\n  //         return ({id: response.id, name: response.name})\n  //     })\n  // }\n  // async function getCharAsync(url)\n  // {\n  //   let response = await fetch(url);\n  //   let result = await response.json()\n  //   return result;\n  // }\n  // const charNames = characters.map(char => {\n  //     getCharAsync(char)\n  //     .then(result => ({id: result.id, name: result.name}))});\n  // Promise.all([charNames])\n  //      .then(results => {\n  //      console.log(results);\n  //  })\n\n\n  function handle_click(ids) {\n    const use = ids.split(\"/\");\n    const len = use.length - 1;\n    const id = use[len]; // console.log(use, len, id)\n\n    props.searchData(\"character_id\", \"1\", `${id}`);\n  } // const listItems = charNames.map((a) =>  <li>{a}</li>);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \"Date: \", air_date, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Code: \", episode, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Characters: \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, characters.map(c => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: () => handle_click(c),\n    className: \"card-text \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 37\n    }\n  }, \" \", c, \" \"))))))));\n};\n\nexport default EpisodeInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Episode.js"],"names":["React","useState","useEffect","EpisodeInfo","props","name","air_date","episode","characters","charNames","forEach","c","fetch","then","response","json","result","push","id","prom","estesi","element","val","handle_click","ids","use","split","len","length","searchData","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst EpisodeInfo = (props) => {\n\n    // let [charNames, setChar] = useState([]);\n    const {name, air_date, episode, characters} = props.episode;\n\n    // useEffect(async () => {\n    //     const dataArray = characters.map(c => fetch(c)\n    //     .then(response => response.json())\n    //     .then(result => ({id: result.id, name: result.name})))\n    //     // await Promise.all([dataArray])\n    //     setChar(dataArray)\n    // }, [])\n\n    charNames = []\n    characters.forEach((c) => fetch(c)\n                        .then(response => response.json())\n                        .then(result => charNames.push({id: result.id, name: result.name})));\n\n    function prom (){\n        var estesi = charNames.forEach(element => {\n        element.then((val) => {return val})})\n        return estesi\n    }\n    // console.log(prom())\n   \n    // const handler = async () =>{\n    //     let dataArray = characters.map(c => fetch(c))\n    //     await Promise.all([dataArray])\n\n    //     dataArray = dataArray.map(c => {\n    //         const response = c.json()\n    //         return ({id: response.id, name: response.name})\n    //     })\n    // }\n\n    // async function getCharAsync(url)\n    // {\n    //   let response = await fetch(url);\n    //   let result = await response.json()\n    //   return result;\n    // }\n    // const charNames = characters.map(char => {\n    //     getCharAsync(char)\n    //     .then(result => ({id: result.id, name: result.name}))});\n\n\n    // Promise.all([charNames])\n    //      .then(results => {\n    //      console.log(results);\n    //  })\n\n\n    function handle_click (ids) {\n        const use = ids.split(\"/\");\n        const len = use.length-1\n        const id = use[len]\n        // console.log(use, len, id)\n        props.searchData(\"character_id\", \"1\", `${id}`);\n    }\n    // const listItems = charNames.map((a) =>  <li>{a}</li>);\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Date: {air_date} </p>\n                        <p className=\"card-text\">Code: {episode} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        {/* {console.log(characters)} */}\n                        {/* {console.log(charNames)} */}\n                        {/* {console.log(handler)} */}\n                        <p className=\"card-text\">Characters: </p>\n                        <ul>\n                            {/* {charNames.map(element => {\n                                element.then(val => <li><a href=\"#\" onClick={() => handle_click(val.id)} className=\"card-text \"> {val.id} </a></li>)\n                            })} */}\n\n                            {characters.map(c =>\n                                <li><a href=\"#\" onClick={() => handle_click(c)} className=\"card-text \"> {c} </a></li>\n                            )}\n\n                            {/* <li><a onClick={handle_click}>\n                                Click me! </a></li> */}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EpisodeInfo;"]},"metadata":{},"sourceType":"module"}