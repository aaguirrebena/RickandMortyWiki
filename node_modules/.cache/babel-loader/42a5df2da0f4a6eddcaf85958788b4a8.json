{"ast":null,"code":"var _jsxFileName = \"/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Location.js\";\nimport React from 'react';\n\nconst PlanetInfo = props => {\n  const {\n    name,\n    type,\n    dimension,\n    residents\n  } = props.location;\n  const [residentData, setResidentData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const promiseArray = residents.map(e => fetch(e).then(response => response.json()));\n    Promise.all(promiseArray).then(result => {\n      setResidentData(result);\n      setLoading(false);\n    });\n  }, [residents]);\n\n  function handleClick(e, resident) {\n    props.searchData(\"character_id\", \"1\", resident.id);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, \"Name: \", name, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, \"Type: \", type, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }\n  }, \"Dimension: \", dimension, \" \")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, \"Residents: \"), loading && \"LOADING...\", /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, !loading && residentData.map(resident => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    onClick: e => handleClick(e, resident),\n    className: \"card-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 41\n    }\n  }, \" \", resident.name))), \"}\")))));\n};\n\nexport default PlanetInfo;","map":{"version":3,"sources":["/home/pocho/Documents/U/2020-1/TallerI/Tarea1/RickandMortyWiki/src/components/Location.js"],"names":["React","PlanetInfo","props","name","type","dimension","residents","location","residentData","setResidentData","useState","loading","setLoading","useEffect","promiseArray","map","e","fetch","then","response","json","Promise","all","result","handleClick","resident","searchData","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAExB,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAqCJ,KAAK,CAACK,QAAjD;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBF,QAAQ,CAAC,IAAD,CAAtC;AAEAG,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMC,YAAY,GAAGR,SAAS,CAACS,GAAV,CAAcC,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,CAASE,IAAT,CAAcC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA1B,CAAnB,CAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ,EAA0BI,IAA1B,CAA+BK,MAAM,IAAI;AACrCd,MAAAA,eAAe,CAACc,MAAD,CAAf;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAHD;AAIH,GANQ,EAMN,CAACN,SAAD,CANM,CAAT;;AAQA,WAASkB,WAAT,CAAsBR,CAAtB,EAAyBS,QAAzB,EAAmC;AAE/BvB,IAAAA,KAAK,CAACwB,UAAN,CAAiB,cAAjB,EAAiC,GAAjC,EAAsCD,QAAQ,CAACE,EAA/C;AACH;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCxB,IAAhC,MADJ,eAEI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAgCC,IAAhC,MAFJ,eAGI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqCC,SAArC,MAHJ,CADJ,CADJ,CADJ,eAUI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEKM,OAAO,IAAI,YAFhB,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACA,OAAD,IACGH,YAAY,CAACO,GAAb,CAAiBU,QAAQ,iBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAC,GAAR;AAAY,IAAA,OAAO,EAAET,CAAC,IAAIQ,WAAW,CAACR,CAAD,EAAIS,QAAJ,CAArC;AACA,IAAA,SAAS,EAAC,WADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACwBA,QAAQ,CAACtB,IADjC,CADJ,CADJ,CAFR,MAHJ,CADJ,CADJ,CAVJ,CADJ;AA+BH,CApDD;;AAsDA,eAAeF,UAAf","sourcesContent":["import React from 'react';\n\nconst PlanetInfo = props => {\n\n    const {name, type, dimension, residents} = props.location;\n\n    const [residentData, setResidentData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const promiseArray = residents.map(e => fetch(e).then(response => response.json()));\n        Promise.all(promiseArray).then(result => {\n            setResidentData(result);\n            setLoading(false);\n        });\n    }, [residents]);\n\n    function handleClick (e, resident) {\n\n        props.searchData(\"character_id\", \"1\", resident.id);\n    }\n\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-4\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Name: {name} </p>\n                        <p className=\"card-text\">Type: {type} </p>\n                        <p className=\"card-text\">Dimension: {dimension} </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-8\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">Residents: </p>\n                        {loading && \"LOADING...\"}\n                        <ul>\n                            {!loading &&\n                                residentData.map(resident => (\n                                    <li>\n                                        <a href=\"#\" onClick={e => handleClick(e, resident)} \n                                        className=\"card-text\"> {resident.name}</a>\n                                    </li>\n                                ))\n                            }}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PlanetInfo;\n"]},"metadata":{},"sourceType":"module"}